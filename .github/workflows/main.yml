name: CareerForge CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8
          pip install flask pdfkit python-docx bleach beautifulsoup4 groq python-jobspy weasyprint cairocffi bcrypt
      
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  test:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov
          pip install flask pdfkit python-docx bleach beautifulsoup4 groq python-jobspy weasyprint cairocffi bcrypt
      
      - name: Install wkhtmltopdf
        run: |
          sudo apt-get update
          sudo apt-get install -y wkhtmltopdf
      
      - name: Run tests
        run: |
          pytest --cov=./ || echo "No tests found, continuing pipeline"
          
      - name: Create test database
        run: |
          python 7855_Complete_Code_cleaned_up/initDb.py

  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flask pdfkit python-docx bleach beautifulsoup4 groq python-jobspy weasyprint cairocffi bcrypt
      
      - name: Create requirements.txt if not exists
        run: |
          if [ ! -f requirements.txt ]; then pip freeze > requirements.txt; fi
      
      - name: Archive production artifacts
        uses: actions/upload-artifact@v4
        with:
          name: app-files
          path: |
            .
            !.git
            !.github
            !__pycache__
            !*.pyc
            !venv
            !*.db

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: ${{ vars.STAGING_URL }}
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: app-files
          path: ./dist
      
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      
      - name: Deploy to staging server
        env:
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
          DEPLOY_PATH: ${{ secrets.DEPLOY_PATH_STAGING }}
        run: |
          echo "Deploying to staging environment"
          rsync -avz --delete ./dist/ ubuntu@${{ secrets.HOST }}:127.0.0.1:8000
          ssh $DEPLOY_USER@$DEPLOY_HOST "cd $DEPLOY_PATH && pip install -r requirements.txt && sudo systemctl restart careerforge-staging"

  deploy-production:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: ${{ vars.PRODUCTION_URL }}
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: app-files
          path: ./dist
      
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      
      - name: Deploy to production server
        env:
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
          DEPLOY_PATH: ${{ secrets.DEPLOY_PATH_PRODUCTION }}
        run: |
          echo "Deploying to production environment"
          rsync -avz --delete ./dist/ $DEPLOY_USER@$DEPLOY_HOST:$DEPLOY_PATH
          ssh $DEPLOY_USER@$DEPLOY_HOST "cd $DEPLOY_PATH && pip install -r requirements.txt && sudo systemctl restart careerforge-production"
